name "port_proxy"

import_types_from "base"
import_types_from "PortProxyTypes.hpp"

task_context "Task" do
    dynamic_input_port(/\w+\.\w+/, nil).
        needs_reliable_connection.
        task_trigger

    property("timeout","double",10.0).
        doc("timeout in seconds after a proxy connection will be deleted if no consumer is connected.")

    operation('loadTypekit').
        returns('bool').
        argument('name', 'std/string', 'the name of the typekit that should be loaded')

    operation("createProxyConnection").
        returns("bool").
        argument("proxy_connection", "port_proxy/ProxyConnection", "Parameter of the connection")

    operation("closeProxyConnection").
        returns("bool").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    #Do not call this method. This is only for testing
    #otherwise the caller might block use isConnected
    operation("checkProxyConnection").
        returns("bool").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    operation("isConnected").
        returns("bool").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    operation("isProxingPort").
        returns("bool").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    operation("getOutputPortName").
        returns("std/string").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    operation("getInputPortName").
        returns("std/string").
        argument("task_name", "std/string", "the name of the remote task.").
        argument("port_name", "std/string", "the name of remote port.")

    operation("closeAllProxyConnections").
        returns("bool")

    periodic(0.01)
end

deployment "rock_port_proxy" do
    task("port_proxy", "port_proxy::Task").
        periodic(0.01)
end
